# Define the compiler and the linker. The linker must be defined since
# the implicit rule for linking uses CC as the linker. g++ can be
# changed to clang++.
CXX = g++
# CXX = clang++
# CXX = /opt/homebrew/opt/llvm/bin/clang++
CC  = $(CXX)

# Define preprocessor, compiler, and linker flags. Uncomment the # lines
# if you use clang++ and wish to use libc++ instead of GNU's libstdc++.
# -g is for debugging.
CPPFLAGS =  -std=c++11 -I.
CXXFLAGS =  -O0 -Wall -Wextra -pedantic-errors -Wold-style-cast
CXXFLAGS += -std=c++11
CXXFLAGS += -g
LDFLAGS =   -g
# CPPFLAGS += -stdlib=libc++
# CXXFLAGS += -stdlib=libc++
# LDFLAGS +=  -stdlib=libc++

PROGS=process
#The stand-alone leak sanitizer is not supported on some platforms.
#Then use the full address-sanitizer, and run with detect_leaks=true
#in ASAN_OPTIONS. (see the rule test_leak).
# LEAK_OPT=-fsanitize=address
LEAK_OPT=-fsanitize=leak

ALL: $(PROGS)

leak: leak.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(LDFLAGS) $(LEAK_OPT) -o $@ $<

process: process.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(LDFLAGS) -fsanitize=address -o $@ $<


test_leak: leak
	ASAN_OPTIONS='detect_leaks=true' ./leak
# Targets
# Phony targets
.PHONY: all clean test_leak

# Standard clean
clean:
	-rm $(PROGS)
	-rm -r $(addsuffix .dSYM, $(PROGS))

